namespace OpenAI
{
	enum ModelType
	{
		image_alpha_001,
		text_embedding_ada_002,
		text_davinci_003,
		text_davinci_edit_001,
		code_davinci_edit_001,
		text_moderation_stable,
		text_moderation_latest,
		Unknown
	};

	[default_interface]
	runtimeclass OpenAiOptions
	{
		OpenAiOptions();

		String OpenAiKey{ get; set; };

		Boolean SetOpenAiKeyFromEnvironmentVar(String enviromentVar);
	};

	[default_interface]
	runtimeclass OpenAiService
	{
		OpenAiService();
		OpenAiService(OpenAI.OpenAiOptions options);

		Boolean IsRunning{ get; };

		void SetOpenAiSecretKey(String key);

		[default_overload]
		Windows.Foundation.IAsyncOperation<OpenAI.Completion.CompletionResponse> RunRequestAsync(OpenAI.Completion.CompletionRequest completionRequest);
		Windows.Foundation.IAsyncOperation<OpenAI.Embedding.EmbeddingResponse> RunRequestAsync(OpenAI.Embedding.EmbeddingRequest embeddingRequest);
		Windows.Foundation.IAsyncOperation<OpenAI.Moderation.ModerationResponse> RunRequestAsync(OpenAI.Moderation.ModerationRequest moderationRequest);
		Windows.Foundation.IAsyncOperation<OpenAI.Image.ImageResponse> RunRequestAsync(OpenAI.Image.ImageRequest imageRequest);
		Windows.Foundation.IAsyncOperation<OpenAI.Edits.EditsResponse> RunRequestAsync(OpenAI.Edits.EditsRequest editsRequest);
	};

	[default_interface]
	unsealed runtimeclass BaseRequest
	{
		protected BaseRequest();

		Boolean IsValid{ get; };
		Windows.Web.Http.HttpRequestMessage BuildHttpRequest();
	};

	[default_interface]
	unsealed runtimeclass BaseResponse
	{
		protected BaseResponse();

		Boolean IsResponseSuccess{ get; };
		OpenAI.ResponseError Error{ get; };
	};

	[default_interface]
	unsealed runtimeclass ResponseError
	{
		protected ResponseError();

		String Code{ get; };
		String Message{ get; };
		String Type{ get; };
	};

	runtimeclass ModelRequest : BaseRequest
	{
		ModelRequest();

		String Model{ get; set; };
	};

	unsealed runtimeclass ModelResponse : BaseRequest
	{
		protected ModelResponse();
	};

	[default_interface]
	runtimeclass FilesRequest : BaseRequest
	{
		FilesRequest();
	};

	unsealed runtimeclass FilesResponse : BaseRequest
	{
		protected FilesResponse();
	};
}

// OpenAI Image
namespace OpenAI.Image
{
	enum SizeType
	{
		Size1024
	};

	enum ResponseFormatType
	{
		Url,
		b64_json
	};

	unsealed runtimeclass ImageRequest : OpenAI.BaseRequest
	{
		String Prompt{ get; set; };
		Int32 GenerationNumber{ get; set; };
		String ImageName{ get; set; };
		SizeType Size{ get; set; };
		ResponseFormatType ResponseFormat{ get; set; };
		String User{ get; set; };
	};

	[default_interface]
	runtimeclass ImageCreateRequest : ImageRequest
	{
		ImageCreateRequest();
	};

	[default_interface]
	runtimeclass ImageVariationRequest : ImageRequest
	{
		ImageVariationRequest();

		Windows.Foundation.IAsyncOperation<Boolean> SetImageAsync(Windows.Storage.StorageFile file);
	};

	[default_interface]
	runtimeclass ImageEditRequest : ImageRequest
	{
		ImageEditRequest();

		Windows.Foundation.IAsyncOperation<Boolean> SetImageAsync(Windows.Storage.StorageFile file);

		[default_overload]
		Windows.Foundation.IAsyncOperation<Boolean> SetMaskAsync(Windows.Storage.StorageFile file);
		Windows.Foundation.IAsyncOperation<Boolean> SetMaskAsync(Windows.Storage.Streams.IBuffer buffer);
	};

	unsealed runtimeclass ImageResponse : OpenAI.BaseResponse
	{
		protected ImageResponse();

		Windows.Foundation.Collections.IVector<Windows.Storage.Streams.IBuffer> Images{ get; };
	};
}

// OpenAI Completion
namespace OpenAI.Completion
{
	[default_interface]
	runtimeclass CompletionRequest : OpenAI.BaseRequest
	{
		CompletionRequest();

		String Prompt{ get; set; };
		String Suffix{ get; set; };
		UInt32 MaxTokens{ get; set; };
		Double Temperature{ get; set; };
		Double TopP{ get; set; };
		UInt16 GenerationNumber{ get; set; };
		Boolean Stream{ get; set; };
		UInt32 Logprobs{ get; set; };
		Boolean Echo{ get; set; };
		String Stop{ get; set; };
		Double PresencePenalty{ get; set; };
		Double FrequencyPenalty{ get; set; };
		UInt16 BestOf{ get; set; };

	};

	unsealed runtimeclass CompletionResponse : OpenAI.BaseResponse
	{
		protected CompletionResponse();

		String Id{ get; };
		String Object{ get; };
		String Model{ get; };
		Double Created{ get; };

		Windows.Foundation.Collections.IVector<OpenAI.Completion.CompletionChoice> Choices{ get; };
		OpenAI.Completion.CompletionUsage Usage{ get; };
	};

	unsealed runtimeclass CompletionChoice
	{
		protected CompletionChoice();

		String Text { get; };
		String FinishReason{ get; };
		UInt32 Index{ get; };
	};

	unsealed runtimeclass CompletionUsage
	{
		protected CompletionUsage();

		UInt32 PromptTokens{ get; };
		UInt32 CompletionTokens{ get; };
		UInt32 TotalTokens{ get; };
	};
}

// OpenAI Embedding
namespace OpenAI.Embedding
{
	[default_interface]
	runtimeclass EmbeddingRequest : OpenAI.BaseRequest
	{
		EmbeddingRequest();

		String Input{ get; set; };
	};

	unsealed runtimeclass EmbeddingResponse : OpenAI.BaseResponse
	{
		protected EmbeddingResponse();

		Windows.Foundation.Collections.IVector<OpenAI.Embedding.EmbeddingValue> Data{ get; };
	};

	unsealed runtimeclass EmbeddingValue
	{
		protected EmbeddingValue();

		Int32 Index{ get; };
		Windows.Foundation.Collections.IVector<Double> Embedding{ get; };
	};
}

// Moderation

namespace OpenAI.Moderation
{
	[default_interface]
	runtimeclass ModerationRequest : OpenAI.BaseRequest
	{
		ModerationRequest();

		String Input{ get; set; };
		OpenAI.ModelType Model{ get; set; };
		Windows.Foundation.Collections.IVector<String> InputAsList{ get; set; };
	};

	enum ModerationCategory
	{
		Hate,
		HateThreatening,
		selfHarm,
		Sexual,
		SexualMinors,
		Violence,
		ViolenceGraphic,
		None
	};

	unsealed runtimeclass ModerationResponse : OpenAI.BaseResponse
	{
		protected ModerationResponse();

		String Id{ get; };
		Windows.Foundation.Collections.IVector<OpenAI.Moderation.ModerationValue> Data{ get; };
	};

	unsealed runtimeclass ModerationValue
	{
		protected ModerationValue();

		OpenAI.Moderation.ModerationCategory Category{ get; };
		Boolean Flagged{ get; };
		Double Score{ get; };
	};
}

// Edits

namespace OpenAI.Edits
{
	[default_interface]
	runtimeclass EditsRequest : OpenAI.BaseRequest
	{
		EditsRequest();

		OpenAI.ModelType Model{ get; set; };
		String Input{ get; set; };
		String Instruction{ get; set; };
		UInt16 GenerationNumber{ get; set; };
		Double Temperature{get; set; };
		Double TopP{ get; set; };
	};

	unsealed runtimeclass EditsResponse : OpenAI.BaseResponse
	{
		protected EditsResponse();

		Windows.Foundation.Collections.IVector<OpenAI.Edits.EditsChoice> Choices{ get; };
		OpenAI.Edits.EditsUsage Usage{ get; };
	};

	unsealed runtimeclass EditsChoice
	{
		protected EditsChoice();

		UInt32 Index { get; };
		String Text { get; };
	};

	unsealed runtimeclass EditsUsage
	{
		protected EditsUsage();

		UInt32 PromptTokens{ get; };
		UInt32 CompletionTokens{ get; };
		UInt32 TotalTokens{ get; };
	};
}