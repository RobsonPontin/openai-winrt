namespace OpenAI
{
	enum ModelType
	{
		image_alpha_001,
		text_embedding_ada_002,
		text_davinci_003,
	};

	[default_interface]
	runtimeclass OpenAiOptions
	{
		OpenAiOptions();

		String OpenAiKey{ get; set; };

		Boolean SetOpenAiKeyFromEnvironmentVar(String enviromentVar);
	};

	[default_interface]
	runtimeclass OpenAiService
	{
		OpenAiService();

		Boolean IsRunning{ get; };

		void SetOpenAiSecretKey(String key);

		[default_overload]
		Windows.Foundation.IAsyncOperation<OpenAI.Completion.CompletionResponse> RunRequestAsync(OpenAI.Completion.CompletionRequest completionRequest);
		Windows.Foundation.IAsyncOperation<OpenAI.Embedding.EmbeddingResponse> RunRequestAsync(OpenAI.Embedding.EmbeddingRequest embeddingRequest);
		Windows.Foundation.IAsyncOperation<OpenAI.Moderation.ModerationResponse> RunRequestAsync(OpenAI.Moderation.ModerationRequest moderationRequest);
		Windows.Foundation.IAsyncOperation<OpenAI.Image.ImageResponse> RunRequestAsync(OpenAI.Image.ImageRequest imageRequest);
	};

	[default_interface]
	unsealed runtimeclass BaseRequest
	{
		protected BaseRequest();

		Boolean IsValid{ get; };
		Windows.Web.Http.HttpRequestMessage BuildHttpRequest();
	};
}

// OpenAI Image
namespace OpenAI.Image
{
	enum SizeType
	{
		Size1024
	};

	enum ResponseFormatType
	{
		Url,
		b64_json
	};

	unsealed runtimeclass ImageRequest : OpenAI.BaseRequest
	{
		String Prompt{ get; set; };
		Int32 CreationNumber{ get; set; };
		String ImageName{ get; set; };
		SizeType Size{ get; set; };
		ResponseFormatType ResponseFormat{ get; set; };
	};

	[default_interface]
	runtimeclass ImageCreateRequest : ImageRequest
	{
		ImageCreateRequest();
	};

	[default_interface]
	runtimeclass ImageVariationRequest : ImageRequest
	{
		ImageVariationRequest();

		Windows.Foundation.IAsyncOperation<Boolean> SetImageAsync(Windows.Storage.StorageFile file);
	};

	[default_interface]
	runtimeclass ImageEditRequest : ImageRequest
	{
		ImageEditRequest();

		Windows.Foundation.IAsyncOperation<Boolean> SetImageAsync(Windows.Storage.StorageFile file);
	};

	unsealed runtimeclass ImageResponse
	{
		protected ImageResponse();

		Boolean IsResponseSuccess{ get; };
		Windows.Foundation.Collections.IVector<Windows.Storage.Streams.IBuffer> Images{ get; };
	};
}

// OpenAI Completion
namespace OpenAI.Completion
{
	[default_interface]
	runtimeclass CompletionRequest : OpenAI.BaseRequest
	{
		CompletionRequest();

		String Prompt{ get; set; };
	};

	unsealed runtimeclass CompletionResponse
	{
		protected CompletionResponse();

		Boolean IsResponseSuccess{ get; };
		String ResponseText{ get; };
	};
}

// OpenAI Embedding
namespace OpenAI.Embedding
{
	[default_interface]
	runtimeclass EmbeddingRequest : OpenAI.BaseRequest
	{
		EmbeddingRequest();

		String Input{ get; set; };
	};

	unsealed runtimeclass EmbeddingResponse
	{
		protected EmbeddingResponse();

		Boolean IsResponseSuccess();
		Windows.Foundation.Collections.IVector<OpenAI.Embedding.EmbeddingValue> Data{ get; };
	};

	unsealed runtimeclass EmbeddingValue
	{
		protected EmbeddingValue();

		Int32 Index{ get; };
		Windows.Foundation.Collections.IVector<Double> Embedding{ get; };
	};
}

// Moderation

namespace OpenAI.Moderation
{
	[default_interface]
	runtimeclass ModerationRequest : OpenAI.BaseRequest
	{
		ModerationRequest();

		String Input{ get; set; };
		Windows.Foundation.Collections.IVector<String> InputAsList{ get; set; };
	};

	enum ModerationCategory
	{
		Hate,
		HateThreatening,
		selfHarm,
		Sexual,
		SexualMinors,
		Violence,
		ViolenceGraphic,
		None
	};

	unsealed runtimeclass ModerationResponse
	{
		protected ModerationResponse();

		Boolean IsResponseSuccess();
		String Id{ get; };
		Windows.Foundation.Collections.IVector<OpenAI.Moderation.ModerationValue> Data{ get; };
	};

	unsealed runtimeclass ModerationValue
	{
		protected ModerationValue();

		OpenAI.Moderation.ModerationCategory Category{ get; };
		Boolean Flagged{ get; };
		Double Score{ get; };
	};
}