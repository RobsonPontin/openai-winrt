
namespace OpenAI
{
	enum ModelType
	{
		ImageAlpha_001
	};

	[default_interface]
	runtimeclass OpenAiOptions
	{
		OpenAiOptions();

		OpenAI.ModelType Model{ get; };
		String OpenAiKey{ get; };

		void SetOpenAikey(String key);
	};

	[default_interface]
	runtimeclass OpenAiService
	{
		OpenAiService();

		Boolean IsRunning{ get; };

		void SetOpenAiSecretKey(String key);
		Windows.Foundation.IAsyncOperation<OpenAI.Image.ImageResponse> RunRequestAsync(OpenAI.Image.ImageRequest imageRequest);
	}
}

// OpenAI Image
namespace OpenAI.Image
{
	enum SizeType
	{
		Size1024
	};

	enum ResponseFormatType
	{
		Url,
		B64_Json
	};

	unsealed runtimeclass ImageRequest
	{
		String Prompt{ get; set; };
		Int32 CreationNumber{ get; set; };
		String ImageName{ get; set; };
		SizeType Size{ get; set; };
		ResponseFormatType ResponseFormat{ get; set; };
		Boolean IsValid{ get; };
	};

	[default_interface]
	runtimeclass ImageCreateRequest : ImageRequest
	{
		ImageCreateRequest();
	};

	[default_interface]
	runtimeclass ImageVariationRequest : ImageRequest
	{
		ImageVariationRequest();

		Windows.Foundation.IAsyncOperation<Boolean> SetImageAsync(Windows.Storage.StorageFile file);
	};

	[default_interface]
	runtimeclass ImageEditRequest : ImageRequest
	{
		ImageEditRequest();

		Windows.Foundation.IAsyncOperation<Boolean> SetImageAsync(Windows.Storage.StorageFile file);
	};

	unsealed runtimeclass ImageResponse
	{
		protected ImageResponse();

		Boolean IsResponseSuccess{ get; };
		Windows.Foundation.Collections.IVector<Windows.Storage.Streams.IBuffer> Images{ get; };
	};
}
